open Globals
open Utilities
open Debug

type direction = Left | Right | Straight

const max_diff_color : float = 0.7071067811865476
const no_trigger_speed_radar : float = 0.01

const kP : float = 0.15 (* constante trouvé par essai pour le gain proportionnel *)
const kI : float = 0.0001 (* constante trouvé par essai pour le gain intégral *)
const kD : float = 0.1 (* constante trouvé par essai pour le gain dérivé *)

const wheel_circumference : float = pi *. cD
const turn_speed : float = cMAXWHEEL *. 0.5

const guide_close : float = 0.85

const min_distance_to_obstacle : int = 60

const time_between_steps : float = 0.5

(* Retourne une vitesse nulle *)
fun no_movement() returns (rspeed: wheels)
let
  rspeed = { left = 0.0; right = 0.0 }
tel

(* Retourne une vitesse nulle et indique si on est arrivé à destination *)
fun speed_arriving(b: bool) returns (rspeed: wheels; arriving: bool)
let
  rspeed = no_movement();
  arriving = b;
tel

(* Calcule la vitesse maximale des roues en fonction de la limitation de vitesse *)
fun max_rspeed(speed_limit : float) returns (max : float)
var w : float;
let
  (* calcule le nombre de degré par seconde par rapport à la limitation de vitesse *)
  (* que l'on divise par la circonférence de la roue pour obtenir le nombre de rotation par seconde *)
  w = ((speed_limit *. 360.0) /. wheel_circumference) -. no_trigger_speed_radar;
  max = min_float(cMAXWHEEL, w); (* on prend le minimum entre la vitesse maximal des roues et la vitesse calculé *)
tel

(* Calcule l'erreur entre la couleur de la route et la couleur du guide *)
fun get_error(sens : sensors) returns (error : float)
var color : color; color_value, normalized_value : float;
let
  color = sens.s_road;
  color_value = compare_colors(color, blue);
  normalized_value = (color_value -. max_diff_color)/.(1.0 -. max_diff_color);
  error = normalized_value -. 0.5; 
tel

(* Gère le PID, calcule la commande en fonction de l'erreur *)
node pid(sens : sensors; kp, ki, kd : float) returns (u : float)
var error : float;
let
  error = get_error(sens);
  u = kp *. error +. ki *. integrator(error, timestep, 0.0) +. kd *. derivative(error, timestep);
tel

fun close_to_guide(sens: sensors) returns (b: bool)
let
  b = compare_colors(sens.s_road, blue) <. guide_close;
tel

(* Retourne la direction à prendre en fonction de la couleur de la route *)
fun get_direction(sens: sensors) returns (dir: direction)
var c_to_guide: bool;
let
  c_to_guide = close_to_guide(sens);
  dir = if compare_colors(sens.s_road, cyan) >. max_diff_color and c_to_guide then Right
        else if compare_colors(sens.s_road, magenta) >. max_diff_color and c_to_guide then Left
        else Straight;
tel

(* Calcule l'ajustement de la vitesse des roues en fonction de la fonction de commande *)
fun get_speed_ajustment(u, max_rota : float) returns (rota_turn : float)
let
  (* vitesse maximal de rotation des roues - (vitesse maximal de rotation des roues * pourcentage à appliquer par rapport à la fonction de commande *)
  rota_turn = max_rota -. (max_rota *. (1.0 -. u))
tel

(* Calcule la vitesse des roues en fonction de la limitation de vitesse et de la couleur de la route *)
node calculate_rspeed(sens : sensors; speed_limit : float) returns (rspeed : wheels)
var u, max_rota, adjustment : float; dir : direction;
let
  u = pid(sens, kP, kI, kD);
  max_rota = max_rspeed(speed_limit);
  dir = get_direction(sens);
  adjustment = get_speed_ajustment(u, max_rota);

  rspeed = if dir = Right then { left = max_rota -. adjustment ; right = max_rota +. adjustment}
           else if dir = Left then { left = max_rota +. adjustment ; right = max_rota -. adjustment }
           else { left = max_rota ; right = max_rota };
tel

(* Retourne true si l'action est Go *)
fun is_go(act : action) returns (b : bool)
let
  b = act = Go
tel

(* Retourne true si l'action est Turn *)
fun is_turn(act : action) returns (b : bool)
let
  b = act = Turn
tel

(* Retourne true si l'action est Stop *)
fun is_stop(act : action) returns (b : bool)
let
  b = act = Stop
tel

(* Retourne la direction à prendre en fonction de l'angle *)
fun turning_side(angle : float) returns (side : direction)
let
  side = if angle <. 0.0 then Right else Left;
tel

(* Détermine la vitesse des roues en fonction de la direction à prendre *)
fun set_speed_from_turn_direction(dir : direction) returns (rspeed : wheels)
let
  rspeed = if dir = Right then {left = turn_speed; right = 0.0}
            else {left = 0.0; right = turn_speed};
tel

(* Calcule la longueur de l'arc en fonction de l'angle *)
fun get_arc_length(angle : float) returns (length : float)
let
  length = wheel_circumference *. (abs(angle) /. 180.0);
tel

(* Calcule la vitesse linéaire en fonction de la vitesse de rotation d'une roue *)
fun get_linear_speed(rspeed : float) returns (speed : float)
let 
  speed = rspeed *. (wheel_circumference /. 360.0);
tel

(* Calcule le temps nécessaire pour effectuer une rotation *)
fun calculate_turning_time(angle : float) returns (time : float)
var arc_length, linear_speed : float;
let
  arc_length = get_arc_length(angle);
  linear_speed = get_linear_speed(turn_speed);
  time = abs(arc_length /. linear_speed);
tel

(* Retourne true si le temps de rotation est atteint *)
node is_turning_done(turning_time : float) returns (turn_done : bool)
var last current_time: float = 0.0;
let 
  current_time = if last current_time >=. turning_time then 0.0 
                else last current_time +. timestep;
  turn_done = current_time >. turning_time;
tel

(* Utilisé lorsque l'action courante est Turn, détermine le temps nécessaire pour effectuer une rotation complète avec une vitesse constante *)
node turn_state(step_iti : itielt; old_step : int) returns (rspeed : wheels; arriving : bool; step : int)
var angle, turning_time : float; turn_done : bool;
let
  angle = step_iti.param;
  turning_time = calculate_turning_time(angle);

  rspeed = set_speed_from_turn_direction(turning_side(angle));

  step = if turn_done then old_step + 1 else old_step;
  turn_done = is_turning_done(turning_time);
  arriving = false;
tel

(* Retourne true si un obstacle est détecté *)
fun detect_obstacle(sens : sensors) returns (b : bool)
let
  b = sens.s_sonar <= min_distance_to_obstacle;
tel

(* Retourne true si un feu de circulation d'une couleur choisi est détecté *)
fun detect_traffic_ligths(sens : sensors; col : color) returns (b : bool)
let
  b = compare_colors(sens.s_front, col) = 1.0 
tel

(* Incrémente l'étape lorqu'on entre dans une zone verte *)
node increment_step_if_green_zone(is_green : bool; curr_step : int) returns (step : int)
var last time: float = 0.0; increment, can_increment : bool;
let
  time = if increment then 0.0 else last time +. timestep;
  can_increment = last time >=. time_between_steps; (* utilisé pour éviter d'incrémenter deux zone verte accolé *)
  increment = is_green and not (false fby is_green) and can_increment; 
  step = if increment then curr_step + 1 else curr_step;
tel

(* Fonction utilisé lorsque l'action est Go, détermine la vitesse des roues et si on doit changer d'étape *)
node go_state(sens : sensors; step_iti : itielt; curr_step : int) returns (rspeed : wheels; arriving : bool; step : int)
let
  rspeed = calculate_rspeed(sens, step_iti.param);
  step = increment_step_if_green_zone(compare_colors(sens.s_road, green) = 1.0, curr_step);
  arriving = false;
tel

node controller(sens : sensors; iti : itielts)
       returns (rspeed : wheels; arriving : bool)
var last step: int = 0; step_iti : itielt;
let
  step_iti = iti[> last step <];
  
  automaton
    state Idle do
      (rspeed, arriving) = speed_arriving(false);
      unless is_go(step_iti.act) then Go
           | is_turn(step_iti.act) then Turn
           | is_stop(step_iti.act) then Stop
    state Go do
      (rspeed, arriving, step) = go_state(sens, step_iti, last step);
      unless is_turn(step_iti.act) then Turn
           | is_stop(step_iti.act) then Stop
           | detect_traffic_ligths(sens, red) then TrafficLight
           | detect_obstacle(sens) then Obstacle
    state Turn do
      (rspeed, arriving,step) = turn_state(step_iti, last step);
      unless is_go(step_iti.act) then Go
           | is_stop(step_iti.act) then Stop      
    state Obstacle do
      (rspeed, arriving) = speed_arriving(false);
      unless not detect_obstacle(sens) then Idle
    state TrafficLight do
      (rspeed, arriving) = speed_arriving(false);
      unless detect_traffic_ligths(sens, green) then Idle
    state Stop do
      (rspeed, arriving) = speed_arriving(true);
  end
tel
